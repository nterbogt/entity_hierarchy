<?php

/**
 * @file
 * Main module functions.
 */

use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\entity_hierarchy_workbench_access\Plugin\AccessControlHierarchy\EntityHierarchy;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function entity_hierarchy_workbench_access_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
  if ($entity_type->id() !== 'node') {
    // Workbench access only supports node at present.
    return;
  }
  if (($node_type = NodeType::load($bundle)) && (!$node_type->getThirdPartySetting('workbench_access', 'workbench_access_status', FALSE))) {
    // No access controls for this node type.
    return;
  }
  try {
    $scheme = \Drupal::service('plugin.manager.workbench_access.scheme')->getActiveScheme();
  }
  catch (PluginNotFoundException $e) {
    // Config import is running.
    return;
  }
  if (!($scheme instanceof EntityHierarchy)) {
    // Some other scheme is active.
    return;
  }
  $config = \Drupal::config('workbench_access.settings')->get('fields');
  if (empty($config['node'][$bundle])) {
    // No field configured for this bundle.
    return;
  }
  $field = $config['node'][$bundle];
  if (!isset($fields[$field])) {
    // No such field anymore.
    return;
  }
  if ($fields[$field]->getType() !== 'entity_reference_hierarchy') {
    // Some other field type.
    return;
  }
  $fields[$field]->addConstraint('ValidHierarchySection');
}
