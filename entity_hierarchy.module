<?php

/**
 * @file
 *
 * A module to make nodes hierarchical.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity;
use Drupal\Core\Render\Element;
use Drupal\node\Entity\Node;
use Drupal\node\NodeTypeInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements @see hook_help().
 */
function entity_hierarchy_help($route_name, RouteMatchInterface $route_match) {
  // TODO: improve help text
  switch ($route_name) {
    case 'help.page.entity_hierarchy':
      return t('A module to create hierarchical entities.');
  }
}

/**
 * Implements @see hook_form_BASE_FORM_ID_alter() for node_form().
 */
function entity_hierarchy_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Todo: entity_hierarchy_set_breadcrumbs($node, TRUE);
  // Todo: unset entity reference field if user doesn't have permission
  $node = $form_state->getFormObject()->getEntity();
  $hierarchy_manager = \Drupal::service('entity_hierarchy.manager');
  $children = $hierarchy_manager->hierarchyLoadAllChildren($node->id(), $node->getEntityType()->id());
//  kint($children);
//  kint($hierarchy_manager->hierarchyGetParentId($node->id(), $node->getType(), $node->getEntityType()->id()));
}

/**
 * Implements @see hook_entity_type_build().
 *
 * Here we're adding a form controller class for a custom node form without
 * overriding the default node form.
 *
 * More specifically, we're adding a children form to a tab named children.
 * This routing information for this tab is set in the .routing.yml file, and
 * the .links.task.yml file.
 *
 * @see \Drupal\entity_hierarchy\Form\NodehierarchyChildrenForm
 */
function entity_hierarchy_entity_type_build(array &$entity_types) {
  /** @type $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['node']
    ->setFormClass('entity_hierarchy_children', 'Drupal\entity_hierarchy\Form\NodehierarchyChildrenForm')
    ->setLinkTemplate('entity_hierarchy-children-form', '/node/{node}/children');
}

/**
 * Implements @see hook_ENTITY_TYPE_insert() for node entities.
 *
 * This function will be called whenever a new node is created. We will write
 * the hierarchy information to the database if a parent is set on the node
 * add form.
 *
 * @see HierarchyManagerInterface::hierarchySaveNode
 */
function entity_hierarchy_node_insert(NodeInterface $node) {
  /** @var \Drupal\entity_hierarchy\HierarchyManager $hierarchy_manager */
//  $hierarchy_manager = \Drupal::service('entity_hierarchy.manager');
//  $hierarchy_manager->hierarchySaveNode($node);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Todo: move this to the services class.
 */
function entity_hierarchy_node_delete(EntityInterface $node) {
  db_delete('entity_hierarchy')->condition('hid', $node->id())->execute();
}

/**
 * Implements @see hook_ENTITY_TYPE_update().
 *
 * This function will be called whenever a node is updated. We will write
 * the hierarchy information to the database if a parent is set on the node
 * edit form or delete the parent if a checkbox is selected.
 *
 * @see HierarchyManagerInterface::hierarchySaveNode
 */
function entity_hierarchy_node_update(EntityInterface $node) {
  $hierarchy_manager = \Drupal::service('entity_hierarchy.manager');
//  $hierarchy_manager->hierarchySaveNode($node);
}

// Todo: automate parent entity id for populating the parent entity reference
// Todo: probably limit the entity reference for parents in some way; see below
// Todo: also may want to find a way to display a tree

/**
 * Implements @see hook_node_prepare_form().
 *
 * We are loading the hierarchy parents for a given node id, and adding it to
 * the node object for later processing in
 * HierarchyManagerInterface::addHierarchyFormElement, which is called in
 * entity_hierarchy_form_node_form_alter().
 *
 * @see entity_hierarchy_form_node_form_alter
 * @see HierarchyManagerInterface::addHierarchyFormElement
 * @see HierarchyManagerInterface::hierarchyDefaultRecord
 */
function entity_hierarchy_node_prepare_form(NodeInterface $node) {
  /** @var \Drupal\entity_hierarchy\HierarchyManager $hierarchy_manager */
  $hierarchy_manager = \Drupal::service('entity_hierarchy.manager');
  /** @var \Drupal\entity_hierarchy\HierarchyOutlineStorage $hierarchy_storage */
  $hierarchy_storage = \Drupal::service('entity_hierarchy.outline_storage');

  // Load the parents if that hasn't been done before.
  $nid = $node->id();
  if (!isset($node->entity_hierarchy_parents) && !empty($nid)) {
    $node->entity_hierarchy_parents = $hierarchy_storage->hierarchyGetParents($node->id());
  }
  // Cannot use module_invoke_all because it doesn't support references.
  foreach (\Drupal::moduleHandler()->getImplementations('entity_hierarchy_default_parents') as $module) {
    $function = $module . '_entity_hierarchy_default_parents';
    $function($node);
  }

  if ( ($hierarchy_manager->hierarchyCanBeChild($node)) || ($hierarchy_manager->hierarchyCanBeParent($node)) ) {
    if (!isset($node->entity_hierarchy_parents) || empty($node->entity_hierarchy_parents)) {
      // Create a default entity_hierarchy object.
      $nid = empty($nid) ? null : $node->id();
      $parent = $hierarchy_manager->hierarchyDefaultRecord($nid, 0);

      // Set the type default if there is one.
      if (empty($nid)) {
        $config = \Drupal::config('entity_hierarchy.settings');
        $default = $config->get('nh_defaultparent_'.$node->getType());
        // Get the parent node id from passed in from the get params.
        $pnid = !empty($_GET['parent']) ? (int) $_GET['parent'] : $default;
        // Get the parent from the get string. User must have update perms for parent unless it is the default.
        $account = \Drupal::currentUser();
        if ($pnid && $parent_node = Node::load($pnid)) {
          if (($hierarchy_manager->hierarchyCanBeParent($node)) && ($account->hasPermission('create child of any parent')
              || $node->access("update") || $parent_node->id() == $default)) {
            $parent->pnid = $pnid;
          }
        }
      }
      $node->entity_hierarchy_parents[] = $parent;
    }
  }
}

/**
 * Implements @see hook_page_attachments().
 *
 * Right now, we're attaching an un-used jS file to all admin pages. Need to
 * re-visit this and only load on the appropriate pages and/or forms.
 */
function entity_hierarchy_page_attachments(&$page) {
  // This returns TRUE for admin paths.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    // Load entity_hierarchy.js on admin pages
    // Todo: confirm entity_hierarchy.js can be deleted, then delete this method.
    $page['#attached']['library'][] = 'entity_hierarchy/entity_hierarchy.nodetypeform';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Adds the "Create new child [type]" links on the parent based on the types set
 * in the field settings.
 *
 * @see \Drupal\entity_hierarchy\HierarchyManager::hierarchyGetAllowedChildTypes()
 *
 * Todo: make code reusable below and implement for each type of *_view that we
 * wish to support going forward (if it makes sense).
 */
function entity_hierarchy_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {

  if ($view_mode == 'full') {
    $create_links = array();
    $current_user = \Drupal::currentUser();
    /** @var \Drupal\entity_hierarchy\HierarchyManager $hierarchy_manager */
    $hierarchy_manager = \Drupal::service('entity_hierarchy.manager');
    if ($current_user->hasPermission('create child nodes') && ($current_user->hasPermission(('create child of any parent') || $current_user->hasPermission('update')))) {
      foreach ($hierarchy_manager->hierarchyGetAllowedChildTypes($node->getType()) as $key => $type) {
        if ($node->access()) {
//          $hierarchy_manager->hierarchyLoadAllChildren($node->id(), $node->getEntityType()->id());
          $destination = (array)drupal_get_destination() + array('parent' => $node->id());
          //d7: $key = str_replace('_', '-', $key);
          $url = \Drupal\Core\Url::fromRoute('node.add', array('node_type' => $key), array('query' => $destination));
          $link = \Drupal\Core\Link::fromTextAndUrl(t($type), $url);
          $create_links[] = render(@$link->toRenderable());
        }
        if ($create_links) {
          $build['entity_hierarchy_new_child_links'] = array(
            // @todo: handle this with hook_theme and template_preprocess (see below) and use #theme over #markup
            // @see function template_preprocess_book_navigation
            // '#theme' => 'entity_hierarchy_new_child_links',
            // The Create new child link should probably come after the content, so make the weight high.
            '#weight' => 1000,
            '#markup' => '<div class="newchild">' . t('Create new child ') . implode(" | ", $create_links) . '</div>',
          );
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 *
 * Todo: implement this
 */
function entity_hierarchy_theme($existing, $type, $theme, $path) {
  return array(
    'entity_hierarchy_new_child_links' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Prepares variables for hierarchy links to be added to pages.
 *
 * Default template: entity_hierarchy-new-child-links.html.twig.
 *
 * @param array $variables
 *
 * Todo: define variables
 */
function template_preprocess_entity_hierarchy_new_child_links(&$variables) {
//  $node = \Drupal::request()->attributes->get('node');
//  dpm($node);
//  dpm($variables);

}

/**
 * Helper functions for strings to determine if a string starts or ends with a
 * substring.
 */
function startsWith($haystack, $needle) {
  // search backwards starting from haystack length characters from the end
  return $needle === "" || strrpos($haystack, $needle, -strlen($haystack)) !== FALSE;
}
function endsWith($haystack, $needle) {
  // search forward starting from end minus needle length characters
  return $needle === "" || strpos($haystack, $needle, strlen($haystack) - strlen($needle)) !== FALSE;
}