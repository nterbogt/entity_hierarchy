<?php

/**
 * @file
 *
 * A module to make nodes hierarchical.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity;
use Drupal\Core\Render\Element;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\nodehierarchy\HierarchyManager;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Extension\Extension;
use Drupal\nodehierarchy\HierarchyManagerInterface;
use Drupal\Component\Utility\String;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function nodehierarchy_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.nodehierarchy':
      return t('A module to make nodes hierarchical.');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Adds the hierarchy form element to the node form.
 */
function nodehierarchy_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // TODO: nodehierarchy_set_breadcrumbs($node, TRUE);
  // Load the node object associated with this form
  $node = $form_state->getFormObject()->getEntity();
  $account = \Drupal::currentUser();

  $hierarchy_manager = \Drupal::service('nodehierarchy.manager');

  // If this node type can be a child.
  if ( ($hierarchy_manager->hierarchyCanBeChild($node)) ||  // Cleaner way to code this?
       ($hierarchy_manager->hierarchyCanBeParent($node)) ) {
    // if the current user can edit the current node's hierarchy settings (or create new children)
    $uid = $node->getOwnerId();
    $can_set_parent = $account->hasPermission('edit all node parents') ||
      ($node->isNew() && $account->hasPermission('create child nodes')) ||
      ($uid == $account->getAccount()->id() && $account->hasPermission('edit own node parents'));

    // Only show the form is the user has permission
    if ($can_set_parent) {
      $collapsed = TRUE;  // Todo: fix
      $form = $hierarchy_manager->addFormElements($form, $form_state, $node, $account, $collapsed);
      $form = $hierarchy_manager->addHierarchyFormElement($form, $form_state, $node, $account, $collapsed);
    }
  }
}

/**
 * Implements hook_node_prepare_form().
 */
function nodehierarchy_node_prepare_form(NodeInterface $node) {
  // Load the parents if that hasn't been done before.
  $nid = $node->id();
  if (!isset($node->nodehierarchy_parents) && !empty($nid)) {
    $node->nodehierarchy_parents = nodehierarchy_get_node_parents($node->id());
  }
  // Cannot use module_invoke_all because it doesn't support references.
  foreach (\Drupal::moduleHandler()->getImplementations('nodehierarchy_default_parents') as $module) {
    $function = $module . '_nodehierarchy_default_parents';
    $function($node);
  }

  $hierarchy_manager = \Drupal::service('nodehierarchy.manager');

  if ( ($hierarchy_manager->hierarchyCanBeChild($node)) ||
    ($hierarchy_manager->hierarchyCanBeParent($node)) ) {
    if (!isset($node->nodehierarchy_parents) || empty($node->nodehierarchy_parents)) {
      // Create a default nodeheirarchy object.
      $nid = empty($nid) ? null : $node->id();
      $parent = _nodehierarchy_default_record($nid, 0);

      // Set the type default if there is one.
      if (empty($nid)) {
        $config = \Drupal::config('nodehierarchy.settings');
        $default = $config->get('nh_defaultparent_'.$node->getEntityType());//variable_get('nh_defaultparent_' . $node->type, 0);
        // Get the parent node id from passed in from the get params.
        $pnid = !empty($_GET['parent']) ? (int) $_GET['parent'] : $default;
        // Get the parent from the get string. User must have update perms for parent unless it is the default.
        $account = \Drupal::currentUser();
        if ($pnid && $parent_node = node_load($pnid)) {
          if (($hierarchy_manager->hierarchyCanBeParent($node)) && ($account->hasPermission('create child of any parent')
              || $node->access("update") || $parent_node->id() == $default)) {
            $parent->pnid = $pnid;
          }
        }
      }
      $node->nodehierarchy_parents[] = $parent;
    }
  }
}

/**
 * Get all the parents for the given node.
 */
function nodehierarchy_get_node_parents($node, $limit = NULL) {
  $cnid = $node;

  // If a node object was passed, then the parents may already have been loaded.
  if (is_object($node)) {
    if (isset($node->nodehierarchy_parents)) {
      return $node->nodehierarchy_parents;
    }
    $cnid = $node->nid;
  }

  $out = array();

  $query = db_select('nodehierarchy', 'nh')
    ->fields('nh')
    ->where('cnid = :cnid', array(':cnid' => $cnid))
    ->orderBy('pweight', 'ASC');

  if ($limit) {
    $query->range(0, $limit);
  }

  $result = $query->execute()->fetchAll();

  foreach ($result as $item) {
    $out[] = $item;
  }
  return $out;
}

/**
 * Get the default menu link values for a new nodehierarchy menu link.
 */
function _nodehierarchy_default_record($cnid = NULL, $npid = NULL) {
  return (object)array(
    'pnid' => $npid,
    'weight' => 0,
    'cnid' => $cnid,
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * So we don't see preview or delete buttons for hierarchy.
 */
function nodehierarchy_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if the form id string ends with "_node_form"
  endsWith($form_id,"_node_form") || endsWith($form_id,"_node_edit_form") ? $node_type = $form_id : $node_type = '';
  endsWith($form_id,"_node_delete_form") ? $node_delete_type = $form_id : $node_delete_type = '';
  $type = $form['type']['#default_value'];  // The type of node

////  dsm('form id: '.$form_id);
////  dsm('node type:'.$node_type);
////  dsm('node_delete_type: '.$node_delete_type);
////  dsm(array_keys($form));
////  dsm($type);
////  dsm($form);

  switch ($form_id) {
    case 'node_type_edit_form':
      //$type = $form['old_type']['#value'];

      $form['nodehierarchy'] = array(
        '#type' => 'details',
        '#group' => 'additional_settings',
        '#title' => t('Node Hierarchy'),
        '#weight' => 10,
      );

      // $form['#attached']['library'][] = nodehierarchy/nodehierarchy.nodetypeform;
      // Right now, we add this js to all admin pages using hook_page_attachments; see below.

      $form['nodehierarchy'] += _nodehierarchy_get_node_type_settings_form($type);

      // TODO: right now the values are not being saved for the node type form
      break;
    case $node_delete_type:
      // TODO: Fix the descendant count code to deal with multiparent situations.
      if ($count = _nodehierarchy_get_children_count($form['nid']['#value'])) {
        $items = array();
        foreach (_nodehierarchy_get_children_menu_links($form['nid']['#value'], 10) as $child) {
          $items[] = /*check_plain*/($child['link_title']);
        }
        if ($count > 10) {
          $items[] = $this->l(t('See all !count children', array('!count' => $count)), 'node/' . $form['nid']['#value'] . '/children');
        }
        $list = /*theme('item_list',*/ array('items' => $items)/*)*/;
        $description = \Drupal::translation()->formatPlural($count,
          'This node has @count child. Check this box to delete it and all of its descendants as well.',
          'This node has @count children. Check this box to delete them and all of their descendants as well.' );
        $description .= t('<p>These children and their decendants will be deleted:!list<p>', array('!list' => $list));
        $form['nodehierarchy_delete_children'] = array(
          '#type' => 'checkbox',
          '#title' => t('Delete descendants'),
          '#description' => $description,
        );
        array_unshift($form['#submit'], 'nodehierarchy_node_delete_submit');
        $form['actions']['#weight'] = 1;
      }
      break;
  }
}

/**
 * Implements hook_page_attachments().
 */
function nodehierarchy_page_attachments(&$page) {
  // This returns TRUE for admin paths.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    // Load nodehierarchy.js on admin pages
    $page['#attached']['library'][] = 'nodehierarchy/nodehierarchy.nodetypeform';
  }
}

/**
 * Get the nodehierarchy setting form for a particular node type.
 */
function _nodehierarchy_get_node_type_settings_form($key, $append_key = FALSE) {
  $config =  \Drupal::config('nodehierarchy.settings');

  $form['nh_allowchild'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed child node types'),
    '#options' => node_type_get_names(),
    '#default_value' => $config->get('nh_allowchild_'.$key),
    '#description' => t('Node types which can be created as child nodes of this node type.'),
  );

  //$form['nh_defaultparent'] = _nodehierarchy_get_parent_selector($key, $config->get('nh_defaultparent_'.$key));
  // TODO: add default parent support later
  //$form['nh_defaultparent']['#title'] = t('Default Parent');

  $form['nh_createmenu'] = array(
    '#type' => 'radios',
    '#title' => t('Show item in menu'),
    '#default_value' => $config->get('nh_createmenu_'.$key), //variable_get('nh_createmenu_' . $key, 'optional_no'),
    '#options' => array(
      'never' => t('Never'),
      'optional_no' => t('Optional - default to no'),
      'optional_yes' => t('Optional - default to yes'),
      'always' => t('Always'),
    ),
    '#description' => t("Users must have the 'administer menu' or 'customize nodehierarchy menus' permission to override default options."),
  );
  $form['nh_multiple'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow multiple parents'),
    '#default_value' => $config->get('nh_multiple_'.$key),
    '#description' => t('Can nodes of this type have multiple parents?.'),
  );

  //$form += module_invoke_all('nodehierarchy_node_type_settings_form', $key);

  // If we need to append the node type key to the form elements, we do so.
  if ($append_key) {
    // Appending the key does not work recursively, so fieldsets etc. are not supported.
    $children = \Drupal\Core\Render\Element::children($form);
    foreach ($children as $form_key) {
      $form[$form_key . '_' . $key] = $form[$form_key];
      unset($form[$form_key]);
    }
  }
  return $form;
}

/**
 * Get the title of the given item to display in a pulldown.
 */
function _nodehierarchy_parent_option_title($item) {
  return str_repeat('--', $item->depth - 1) . ' ' . Unicode::truncate($item->title, 60, TRUE, FALSE);
}

/**
 * Get the parent selector key from a menu_link array. Returns either nid:mlid or nid
 */
function _nodehierarchy_get_parent_selector_value($parent) {
  $out = 0;
  // If the parent value is a node ID, laod the menu_link for that node.
  if (is_numeric($parent)) {
    $out = trim($parent . ':' . _nodehierarchy_get_node_mlid($parent), ':');
  }
  elseif (is_numeric($parent['mlid'])) {
    $out = $parent['nid'] . ':' . $parent['mlid'];
  }
  elseif (!empty($parent['nid'])) {
    $out = $parent['nid'];
  }
  return $out;
}

/**
 * Return a list of menu items that are valid possible parents for the given node.
 */
function _nodehierarchy_parent_options(HierarchyManager $child_type, $exclude = NULL) {
  static $options = array();

  // If these options have already been generated, then return that saved version.
  if (isset($options[$child_type][$exclude])) {
    return $options[$child_type][$exclude];
  }

  $result = array();
  // Flatten tree to a list of options.
  $parent_types = \Drupal::service('nodehierarchy.manager')->hierarchyGetAllowedParentTypes($child_type);
//  dsm($parent_types);
//  $out = nodehierarchy_tree_data($result, $exclude, $parent_types);
//  dsm($out);

  // Static caching to prevent these options being built more than once.
//  $options[$child_type][$exclude] = $out;
//  return $out;
  return $parent_types;
}



/**
 * Build the data representing a menu tree.
 *
 * @param $result
 *   The database result.
 * @param $parents
 *   An array of the plid values that represent the path from the current page
 *   to the root of the menu tree.
 * @param $depth
 *   The depth of the current menu tree.
 * @return
 *   See menu_tree_page_data for a description of the data structure.
 */
function nodehierarchy_tree_data($result = NULL, $exclude = NULL, $allowed_types, $depth = 1) {
  list(, $tree) = _nodehierarchy_tree_data($result, $exclude, $allowed_types, $depth);
  return $tree;
}

/**
 * Recursive helper function to build the data representing a menu tree.
 *
 * The function is a bit complex because the rendering of an item depends on
 * the next menu item. So we are always rendering the element previously
 * processed not the current one.
 */
function _nodehierarchy_tree_data($result, $exclude = NULL, $allowed_types, $depth, $previous_element = array()) {
  $remnant = NULL;
  $tree = array();
  $enabled_tree = TRUE;
  $exclude = NULL;

  foreach ($result as $item) {
    if ($exclude !== $item['nid']) {
      $item['disabled'] = in_array($item['type'], $allowed_types) ? FALSE : TRUE;
//      $item['disabled'] = $item['disabled'] || (!node_access('update', $item) && !user_access('create child of any parent'));
      $enabled_tree = $enabled_tree || empty($item['disabled']) || (isset($previous_element['disabled']) && empty($previous_element['disabled']));

      // The current item is the first in a new submenu.
      if ($item['depth'] > $depth) {
        // _menu_tree returns an item and the menu tree structure.
        list($item, $below) = _nodehierarchy_tree_data($result, $exclude, $allowed_types, $item['depth'], $item);
        if ($previous_element && ($below || !$previous_element['disabled'])) {
          $tree[_nodehierarchy_get_parent_selector_value($previous_element)] = $previous_element;
        }
        $tree += $below;

        // We need to fall back one level.
        if (!isset($item) || $item['depth'] < $depth) {
          return $enabled_tree ? array($item, $tree) : array($item, array());
        }
        // This will be the link to be output in the next iteration.
        $previous_element = $item;
      }
      // We are at the same depth, so we use the previous element.
      elseif ($item['depth'] == $depth) {
        if ($previous_element && !$previous_element['disabled']) {
          // Only the first time.
          $tree[_nodehierarchy_get_parent_selector_value($previous_element)] = $previous_element;
        }
        // This will be the link to be output in the next iteration.
        $previous_element = $item;
      }
      // The submenu ended with the previous item, so pass back the current item.
      else {
        $remnant = $item;
        break;
      }
    }
  }
  if ($previous_element && !$previous_element['disabled']) {
    // We have one more link dangling.
    $tree[_nodehierarchy_get_parent_selector_value($previous_element)] = $previous_element;
  }
  return $enabled_tree ? array($remnant, $tree) : array($remnant, array());
}

/**
 * Get the menu link id for the given node.
 */
function _nodehierarchy_get_node_mlids($nid) {
  $out = array();
  $result = db_query("SELECT mlid FROM {menu_links} WHERE module = :module AND link_path = :link_path ORDER BY mlid", array(':module' => 'nodehierarchy', ':link_path' => 'node/' . $nid), array('fetch' => \PDO::FETCH_ASSOC));
  foreach ($result as $link) {
    $out[] = $link['mlid'];
  }
  return $out;
}

/**
 * Get the primary menu link id for the given node. Optionally create one if needed.
 */
function _nodehierarchy_get_node_mlid($nid, $create = FALSE) {
  $out = NULL;

  if ($nid) {
    $out = db_query("SELECT mlid FROM {menu_links} WHERE module = :module AND link_path = :link_path ORDER BY mlid LIMIT 1", array(':module' => 'nodehierarchy', ':link_path' => 'node/' . $nid))->fetchField();

    // Create a new menu item if needed.
    if ($create && !$out) {
      $menu_link = _nodehierarchy_create_node_menu_link($nid);
      $out = $menu_link['mlid'];
    }
  }
  return $out;
}

/**
 * Count the children of the given node.
 */
function _nodehierarchy_get_children_count($parent) {
  if ($plid = _nodehierarchy_get_node_mlid($parent)) {
    return _nodehierarchy_get_children_count_plid($plid);
  }
  return 0;
}
/**
 * Count the children of the given menu link.
 */
function _nodehierarchy_get_children_count_plid($plid) {
  if ($plid) {
    $out = db_query("SELECT count(mlid) as children_count
                     FROM {menu_links} WHERE module = :module AND plid = :plid
                     AND router_path = :router_path", array(':module' => 'nodehierarchy', ':plid' => $plid, ':router_path' => 'node/%'))->fetchField();
    return $out;
  }
  return 0;
}

/**
 * Get the children of the given node.
 */
function _nodehierarchy_get_children_menu_links($pnid, $limit = FALSE) {
  $children = array();
//  $query = "
//       SELECT nh_menu_links.*
//         FROM {node} node
//    LEFT JOIN {nodehierarchy_menu_links} nodehierarchy_menu_links ON node.nid = nodehierarchy_menu_links.nid
//    LEFT JOIN {menu_links} nh_menu_links ON nodehierarchy_menu_links.mlid = nh_menu_links.mlid
//    LEFT JOIN {nodehierarchy_menu_links} nh_parent ON nh_menu_links.plid = nh_parent.mlid
//        WHERE (nh_parent.nid = :pnid)
//     ORDER BY nh_menu_links.weight ASC";

//  if ($limit) {
//    $query .= " LIMIT $limit";
//  }
//
//  $result = db_query($query, array(':pnid' => $pnid), array('fetch' => PDO::FETCH_ASSOC));
//  foreach ($result as $item) {
//    $item['pnid'] = $pnid;
//    $children[] = _nodehierarchy_prepare_menu_link($item);
//  }
  return $children;
}

/**
 * Get the menu link for the given node.
 */
function _nodehierarchy_create_node_menu_link($nid) {
  $node = Node::load($nid);
  $menu_link = _nodehierarchy_default_menu_link($node->getTitle());
  $menu_link['link_title'] = $node->getTitle();
  _nodehierarchy_save_menu_link($menu_link);
  return $menu_link;
}

/**
* Save a menu link with changes if needed.
 */
function _nodehierarchy_save_menu_link(&$menu_link) {
  // Item is being moved to a new parent.
  $old_plid = _nodehierarchy_get_plid_from_mlid($menu_link['mlid']);
  if ($old_plid !== (int) $menu_link['plid']) {
    // Get the next weight for the new parent.
    $menu_link['weight'] = _nodehierarchy_get_menu_link_next_child_weight($menu_link['plid']);
  }

  // Save the parent
  $menu_link->save();
  // Create the link reference.
  _nodehierarchy_create_nodehierarchy_menu_link_reference($menu_link);
}

/**
 * Get the default menu link values for a new nodehierarchy menu link.
 */
function _nodehierarchy_default_menu_link($nid = NULL, $plid = 0, $enabled = FALSE) {
  $config = \Drupal::config('nodehierarchy_default_menu_name');
  return array(
    'mlid' => NULL,
    'module' => 'nodehierarchy',
    'menu_name' => $config->get('nodehierarchy_default_menu_name'),//variable_get('nodehierarchy_default_menu_name', 'navigation'),
    'router_path' => 'node/%',
    'link_path' => !empty($nid) ? 'node/' . $nid : '',
    'hidden' => !$enabled,
    'enabled' => $enabled,
    'plid' => $plid,
    'weight' => 0,
    'nid' => !empty($nid) ? $nid : NULL,
    'customized' => 0,
  );
}

/**
 * Get the parent link ID from the given menu link id.
 */
function _nodehierarchy_get_plid_from_mlid($mlid) {
  if ($mlid) {
    return (int) db_query("SELECT plid FROM {menu_links} WHERE mlid = :mlid", array(':mlid' => $mlid))->fetchField();
  }
  return NULL;
}
/**
 * Get the next child weight for a given plid.
 */
function _nodehierarchy_get_menu_link_next_child_weight($plid) {
  $out = db_query("SELECT MAX(weight) FROM {menu_links} WHERE module = :module AND plid = :plid", array(':module' => 'nodehierarchy', ':plid' => $plid))->fetchField();
  if ($out !== NULL) {
    return $out + 1;
  }
  return 0;
}

/**
 * Create a link from the node to its menu item.
 *
 * This pivot table can be used for more efficiently joining to the menu links table for views integration.
 */
function _nodehierarchy_create_nodehierarchy_menu_link_reference($menu_link) {
  if (!db_query("SELECT mlid FROM {nodehierarchy_menu_links} WHERE mlid = :mlid", array(':mlid' => $menu_link['mlid']))->fetchField()) {
    //drupal_write_record('nodehierarchy_menu_links', $menu_link);
    \Drupal::database()->merge('nodehierarchy_menu_links', $menu_link);
  }
}

/* Helper Functions */
function startsWith($haystack, $needle) {
  // search backwards starting from haystack length characters from the end
  return $needle === "" || strrpos($haystack, $needle, -strlen($haystack)) !== FALSE;
}
function endsWith($haystack, $needle) {
  // search forward starting from end minus needle length characters
  return $needle === "" || strpos($haystack, $needle, strlen($haystack) - strlen($needle)) !== FALSE;
}
