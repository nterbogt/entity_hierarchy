<?php

/**
 * @file
 * Contains nodehierarchy_views.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\Views;
use Drupal\nodehierarchy\HierarchyManager;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeTypeInterface;


/**
 * Implements hook_help().
 */
function nodehierarchy_views_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nodehierarchy_views module.
    case 'help.page.nodehierarchy_views':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides views that may be embedded on hierarchy pages (e.g. to list all child pages by child weight).') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function nodehierarchy_views_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  dpm($form_id);
}

/**
 * Implements hook_nodehierarchy_node_type_settings_form().
 */
function nodehierarchy_views_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\nodehierarchy\HierarchyManager $hierarchy_manager */
  $hierarchy_manager = \Drupal::service('nodehierarchy.manager');
  $type = $form['type']['#default_value'];  // The content type
//  $form = array();
  $config =  \Drupal::config('nodehierarchy.settings');
  if ($hierarchy_manager->hierarchyCanBeParent($type)) {
    $form['hierarchy']['nh_default_children_view'] = array(
        '#type' => 'select',
        '#title' => t('Default Children View'),
        '#multiple' => FALSE,
        '#options' => _nodehierarchy_views_view_options(),
        '#required' => FALSE,
        '#default_value' => $config->get('nh_default_children_view_' . $type),
        '#description' => t('Default for the embed children view feature.'),
    );
  }
  $form['#entity_builders'][] = 'nodehierarchy_views_form_node_type_form_builder';
  return $form;
}

function nodehierarchy_views_form_node_type_form_builder ($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  $node_type = $type->get('type');
  $config = \Drupal::getContainer()->get('config.factory')->getEditable('nodehierarchy.settings');
  $config->set('nh_default_children_view_'.$node_type, $form_state->getValue('nh_default_children_view'));
  $config->save();
}

/**
 * Prepare a list of views for selection.
 */
function _nodehierarchy_views_view_options() {
  $options = array();

  $options[0] = '-- ' . t('NONE') . ' --';
  $views = _nodehierarchy_views_get_embed_views();
  foreach ($views as $item) {
    $options[$item['name'] . ':' . $item['display']] = $item['title'];
  }

  return $options;
}

/**
 * Get a list of views that can be embedded.
 */
function _nodehierarchy_views_get_embed_views($reset = FALSE) {
  $used_views = &drupal_static(__FUNCTION__);

  if (!isset($used_views) || $reset) {
      $views = Views::getApplicableViews('hierarchy_embed_display');
      foreach ($views as $data) {
        list($view_id, $display_id) = $data;
        $view = Views::getView($view_id);
        $view->setDisplay($display_id);
        $display_object = $view->getDisplay();
        $display_title = $display_object->display['display_title'];
        $used_views[] = array(
            'name' => $view_id,
            'display' => $display_id,
            'title' => $display_title,
        );
        $view->destroy();
      }
  }

  return isset($used_views) ? $used_views : array();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function nodehierarchy_views_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
//  $form = array();
  $node = $form_state->getFormObject()->getEntity();
  /** @var \Drupal\nodehierarchy\HierarchyManager $hierarchy_manager */
  $hierarchy_manager = \Drupal::service('nodehierarchy.manager');
  $type = $node->getType();
  dpm($node);
  dpm($node->nh_children_view);

  $default_value = NULL;
  if (!empty($node->nh_children_view)) {
    $display = !empty($node->nh_children_view_display) ? $node->nh_children_view_display : 'default';
    $default_value = $node->nh_children_view . ':' . $display;
  }

  if ($node && $hierarchy_manager->hierarchyCanBeParent($type)) {
    $form['hierarchy']['nh_children_view'] = array(
      '#type' => \Drupal::currentUser()->hasPermission('edit embedded child view') ? 'select' : 'value',
      '#title' => t('Embed Children View'),
      '#multiple' => FALSE,
      '#options' => _nodehierarchy_views_view_options(),
      '#required' => FALSE,
      '#default_value' => $default_value,
      '#description' => t("Embed a view containing this node's children into the node's page view"),
    );
  }
  return $form;
}